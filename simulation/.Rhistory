betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout_duan = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
source("CLNMA_functions.R")
set.seed(1)
mu1 = c(0.5,1)
mu2 = c(0,-0.5)
tau1 =c(0.25,0.36)
tau2 =c(0.36,0.16)
tau = c(tau1,tau2)
rho = matrix(c(1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1),
nrow = 4)
tau_BC = tau1+tau2-2*rho[1,2]*sqrt(tau1*tau2)
betweenv = diag(tau)
for(i in 1:3){
for(j in (i+1):4){
betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
rm(list=ls())
library(gemtc)
library(rjags)
library(MASS)
source("CLNMA_functions.R")
set.seed(1)
mu1 = c(0.5,1)
mu2 = c(0,-0.5)
tau1 =c(0.25,0.36)
tau2 =c(0.36,0.16)
tau = c(tau1,tau2)
rho = matrix(c(1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1),
nrow = 4)
tau_BC = tau1+tau2-2*rho[1,2]*sqrt(tau1*tau2)
betweenv = diag(tau)
for(i in 1:3){
for(j in (i+1):4){
betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
?subset
View(dataout)
View(dataout)
source("CLNMA_functions.R")
set.seed(1)
mu1 = c(0.5,1)
mu2 = c(0,-0.5)
tau1 =c(0.25,0.36)
tau2 =c(0.36,0.16)
tau = c(tau1,tau2)
rho = matrix(c(1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1),
nrow = 4)
tau_BC = tau1+tau2-2*rho[1,2]*sqrt(tau1*tau2)
betweenv = diag(tau)
for(i in 1:3){
for(j in (i+1):4){
betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
dataout1 = subset(dataout,  t2 == 3,select = c("ID", "t1",  "outcome1", "ss1"))
dataout1 = subset(dataout,  t2 == 3, select = c("ID", "t1", "t2", "outcome1", "ss1"))
colnames(dataout)
dataout1 = subset(dataout,  t2 == 3, select = c("ID", "t1", "t2", "outcome1", "sd1"))
colnames(dataout1) = c("study", "treatment", "diff", "std.err")
dataout2 = subset(dataout, t2 == 3, select = c("ID", "t1",  "outcome2", "sd2"))
colnames(dataout2) = c("study", "treatment", "diff", "std.err")
nrow(dataout)
dataout[1,]
dataout[1,"ID"]
tet = c(1,2,NA,NA)
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
colnames(dataout1)[4:5] = c("outcome","sd")
data_result = NULL
for(i in 1:nrow(dataout1)){
temp_Id = dataout1[i,"ID"]
temp_treatment=  dataout1[i,"t1"]
temp_reference = dataout1[i,"t2"]
temp_diff = dataout1[i, "outcome"]
temp_sd = dataout1[i,"sd"]
data_result = rbind(data_result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
data_result = rbind(data_result, c(temp_Id, temp_reference, NA, NA))
}
data_result
source("CLNMA_functions.R")
set.seed(1)
mu1 = c(0.5,1)
mu2 = c(0,-0.5)
tau1 =c(0.25,0.36)
tau2 =c(0.36,0.16)
tau = c(tau1,tau2)
rho = matrix(c(1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1),
nrow = 4)
tau_BC = tau1+tau2-2*rho[1,2]*sqrt(tau1*tau2)
betweenv = diag(tau)
for(i in 1:3){
for(j in (i+1):4){
betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
dataout1
prepare_dataset_for_gemtc <- function(dataset){
colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataout[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataout1[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
prepare_dataset_for_gemtc <- function(dataset){
#colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataout[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataout1[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
prepare_dataset_for_gemtc <- function(dataset){
colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataout[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataout1[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
#colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
# result = NULL
# for(i in 1:nrow(dataout1)){
#   temp_Id = dataout[i,"ID"]
#   temp_treatment=  dataout[i,"t1"]
#   temp_reference = dataout[i,"t2"]
#   temp_diff = dataout1[i, "outcome"]
#   temp_sd = dataout1[i,"sd"]
#   data_result = rbind(data_result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#   data_result = rbind(data_result, c(temp_Id, temp_reference, NA, NA))
# }
# data_result
prepare_dataset_for_gemtc <- function(dataset){
colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataout[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataout1[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
#colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
# result = NULL
# for(i in 1:nrow(dataout1)){
#   temp_Id = dataout[i,"ID"]
#   temp_treatment=  dataout[i,"t1"]
#   temp_reference = dataout[i,"t2"]
#   temp_diff = dataout1[i, "outcome"]
#   temp_sd = dataout1[i,"sd"]
#   data_result = rbind(data_result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#   data_result = rbind(data_result, c(temp_Id, temp_reference, NA, NA))
# }
# data_result
dataout1
prepare_dataset_for_gemtc <- function(dataset){
colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataset[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataout1[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
prepare_dataset_for_gemtc <- function(dataset){
colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataset[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataset[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
# result = NULL
# for(i in 1:nrow(dataout1)){
#   temp_Id = dataout[i,"ID"]
#   temp_treatment=  dataout[i,"t1"]
#   temp_reference = dataout[i,"t2"]
#   temp_diff = dataout1[i, "outcome"]
#   temp_sd = dataout1[i,"sd"]
#   data_result = rbind(data_result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#   data_result = rbind(data_result, c(temp_Id, temp_reference, NA, NA))
# }
# data_result
dataout1
prepare_dataset_for_gemtc <- function(dataset){
colnames(dataset)[4:5] = c("outcome","sd")
result = NULL
for(i in 1:nrow(dataset)){
temp_Id = dataset[i,"ID"]
temp_treatment=  dataset[i,"t1"]
temp_reference = dataset[i,"t2"]
temp_diff = dataset[i, "outcome"]
temp_sd = dataset[i,"sd"]
result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
result = rbind(result, c(temp_Id, temp_reference, NA, NA))
}
colnames(result) = c("study", "treatment", "diff", "std.err")
return(result)
}
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
dataout1 = prepare_dataset_for_gemtc(dataout1)
dataout2 = subset(dataout,  select = c("ID", "t1", "t2", "outcome2", "sd2"))
dataout2 = prepare_dataset_for_gemtc(dataout2)
total = 0
n_stat = 0
for(i in 1:100){
n = 0
while(tot <= 90){
temp =rexp(-log0.85/10)
tot = tot +temp
n = n + 1
}
n_stat = n + n_stat
}
total = 0
n_stat = 0
for(i in 1:100){
n = 0
tot = 0
while(tot <= 90){
temp =rexp(-log0.85/10)
tot = tot +temp
n = n + 1
}
n_stat = n + n_stat
}
total = 0
n_stat = 0
for(i in 1:100){
n = 0
tot = 0
while(tot <= 90){
temp =rexp(-log(0.85)/10)
tot = tot +temp
n = n + 1
}
n_stat = n + n_stat
}
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Library/CloudStorage/Box-Box/SMU STAT Phd/Year 2/Summer/Box_Prj3_Result/result/coverage probability")
knitr::opts_chunk$set(echo = TRUE)
# netmeta
load("netmeta_simu_unequal_correlation_2023-06-10.RData")
# true value
mu1 = c(0.5,1)
mu1[3] = mu1[1] - mu1[2]
mu2 = c(0,-0.5)
mu2[3] = mu2[1] - mu2[2]
# netmeta
load("netmeta_simu_unequal_correlation_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = temp_netmeta_mu1[1] - temp_netmeta_mu1[2]
# true value
mu1 = c(0.5,1)
mu1[3] = mu1[1] - mu1[2]
mu2 = c(0,-0.5)
mu2[3] = mu2[1] - mu2[2]
# netmeta
load("netmeta_simu_unequal_correlation_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = netmeta_mu1[1] - netmeta_mu1[2]
coverage_prop1 = numeric(3)
for(i in 1:3){
upper_bound = estimated_ci1[,2*i]
lower_bound = estimated_ci1[,2*i-1]
coverage_prop1[i] = mean((mu1[i] >=  lower_bound) & (mu1[i] <= upper_bound))
}
# true value
mu1 = c(0.5,1)
mu1[3] = mu1[1] - mu1[2]
mu2 = c(0,-0.5)
mu2[3] = mu2[1] - mu2[2]
calculate_covarege_probability(estimated_ci, true_mu){
# true value
mu1 = c(0.5,1)
mu1[3] = mu1[1] - mu1[2]
mu2 = c(0,-0.5)
mu2[3] = mu2[1] - mu2[2]
calculate_covarege_probability<- function(estimated_ci, true_mu){
coverage_probability = numeric(3)
for(i in 1:3){
upper_bound = estimated_ci[,2*i]
lower_bound = estimated_ci[,2*i-1]
coverage_propability[i] = mean((true_mu[i] >=  lower_bound) & (true_mu[i] <= upper_bound))
}
return(coverage_probability)
}
# netmeta
load("netmeta_simu_unequal_correlation_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = netmeta_mu1[1] - netmeta_mu1[2]
coverage_prob1 = calculate_covarege_probability(estimated_ci1, mu1)
# true value
mu1 = c(0.5,1)
mu1[3] = mu1[1] - mu1[2]
mu2 = c(0,-0.5)
mu2[3] = mu2[1] - mu2[2]
calculate_covarege_probability<- function(estimated_ci, true_mu){
coverage_probability = numeric(3)
for(i in 1:3){
upper_bound = estimated_ci[,2*i]
lower_bound = estimated_ci[,2*i-1]
coverage_probability[i] = mean((true_mu[i] >=  lower_bound) & (true_mu[i] <= upper_bound))
}
return(coverage_probability)
}
# netmeta
load("netmeta_simu_unequal_correlation_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = netmeta_mu1[1] - netmeta_mu1[2]
coverage_prob1 = calculate_covarege_probability(estimated_ci1, mu1)
netmeta_mu2 = colMeans(estimated_mu2)
netmeta_mu2[3] = netmeta_mu2[1] - netmeta_mu2[2]
coverage_prob2 = calculate_covarege_probability(estimated_ci2, mu2)
netmeta_unequal_correlation_estiamte = c(netmeta_mu1, netmeta_mu2)
netmeta_unequal_correlation_ci = c(coverage_prob1, coverage_prob2 )
load("netmeta_simu_no_adjust_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = netmeta_mu1[1] - netmeta_mu1[2]
coverage_prob1 = calculate_covarege_probability(estimated_ci1, mu1)
netmeta_mu2 = colMeans(estimated_mu2)
netmeta_mu2[3] = netmeta_mu2[1] - netmeta_mu2[2]
coverage_prob2 = calculate_covarege_probability(estimated_ci2, mu2)
netmeta_no_adjust_estiamte = c(netmeta_mu1, netmeta_mu2)
netmeta_no_adjust_correlation_ci = c(coverage_prob1, coverage_prob2 )
load("netmeta_simu_unequal_correlation_large_sample_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = netmeta_mu1[1] - netmeta_mu1[2]
coverage_prob1 = calculate_covarege_probability(estimated_ci1, mu1)
netmeta_mu2 = colMeans(estimated_mu2)
netmeta_mu2[3] = netmeta_mu2[1] - netmeta_mu2[2]
coverage_prob2 = calculate_covarege_probability(estimated_ci2, mu2)
netmeta_unequal_correlation_large_sample_estiamte = c(netmeta_mu1, netmeta_mu2)
netmeta_unequal_correlation_large_sample_ci = c(coverage_prob1, coverage_prob2 )
load("netmeta_simu_large_sample_2023-06-10.RData")
netmeta_mu1 = colMeans(estimated_mu1)
netmeta_mu1[3] = netmeta_mu1[1] - netmeta_mu1[2]
coverage_prob1 = calculate_covarege_probability(estimated_ci1, mu1)
netmeta_mu2 = colMeans(estimated_mu2)
netmeta_mu2[3] = netmeta_mu2[1] - netmeta_mu2[2]
coverage_prob2 = calculate_covarege_probability(estimated_ci2, mu2)
netmeta_large_sample_estiamte = c(netmeta_mu1, netmeta_mu2)
netmeta_large_sample_correlation_ci = c(coverage_prob1, coverage_prob2 )
rm(list=ls())
load("simu_blc_no_adjustment_2023-06-11.RData")
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
setwd("~/Github/Bayesian_Composite_NMA/simulation")
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
estimated_ci
posterior_mu_ci
temp_posterior[(length(temp_posterior)-11):length(temp_posterior)]
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
estimated_mu
posterior_mu_ci
posterior_mu_var_posterior
posterior_mu_var_sandwich
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
temp_posterior_mu_ci
length(temp_posterior_mu_ci)
source("~/Github/Bayesian_Composite_NMA/simulation/simulation_bcl.R", echo=TRUE)
posterior_mu_ci
posterior_mu
posterior_mu_var_posterior
posterior_mu_var_sandwich
knitr::opts_chunk$set(echo = TRUE)
mu1 = c(0.5,1,-0.5)
mu2 = c(0,-0.5,0.5)
mu = NULL
for(i in 1:3){
mu = c(mu, mu1[i], mu2[i])
}
load("simulation_result_full_likelihood_Bayesian_2023-06-09.RData")
knitr::opts_chunk$set(echo = TRUE)
mu1 = c(0.5,1,-0.5)
mu2 = c(0,-0.5,0.5)
mu = NULL
for(i in 1:3){
mu = c(mu, mu1[i], mu2[i])
}
load("simulation_result_full_likelihood_Bayesian_2023-06-09.RData")
estiamted_mu = colMeans(posterior_mu)
estiamted_mu[5] = estiamted_mu[1] - estiamted_mu[3]
estiamted_mu[6] = estiamted_mu[2] - estiamted_mu[4]
bias = abs(estimated_mu - mu)
knitr::opts_chunk$set(echo = TRUE)
mu1 = c(0.5,1,-0.5)
mu2 = c(0,-0.5,0.5)
mu = NULL
for(i in 1:3){
mu = c(mu, mu1[i], mu2[i])
}
load("simulation_result_full_likelihood_Bayesian_2023-06-09.RData")
estimated_mu = colMeans(posterior_mu)
estimated_mu[5] = estiamted_mu[1] - estiamted_mu[3]
estimated_mu[6] = estiamted_mu[2] - estiamted_mu[4]
bias = abs(estimated_mu - mu)
colnames(bias) = c("BA1", "BA2", "CA1", "CA2", "BC1", "BC2")
knitr::opts_chunk$set(echo = TRUE)
mu1 = c(0.5,1,-0.5)
mu2 = c(0,-0.5,0.5)
mu = NULL
for(i in 1:3){
mu = c(mu, mu1[i], mu2[i])
}
load("simulation_result_full_likelihood_Bayesian_2023-06-09.RData")
estimated_mu = colMeans(posterior_mu)
estimated_mu[5] = estiamted_mu[1] - estiamted_mu[3]
estimated_mu[6] = estiamted_mu[2] - estiamted_mu[4]
bias = abs(estimated_mu - mu)
names(bias) = c("BA1", "BA2", "CA1", "CA2", "BC1", "BC2")
print(bias)
knitr::opts_chunk$set(echo = TRUE)
mu1 = c(0.5,1,-0.5)
mu2 = c(0,-0.5,0.5)
mu = NULL
for(i in 1:3){
mu = c(mu, mu1[i], mu2[i])
}
load("simulation_result_full_likelihood_Bayesian_2023-06-09.RData")
estimated_mu = colMeans(posterior_mu)
#estimated_mu[5] = estiamted_mu[1] - estiamted_mu[3]
#estimated_mu[6] = estiamted_mu[2] - estiamted_mu[4]
bias = abs(estimated_mu - mu)
names(bias) = c("BA1", "BA2", "CA1", "CA2", "BC1", "BC2")
print(round(bias,4))
