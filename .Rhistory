ate(xfus1 ~ epo1,, nuisance=~1, propensity=~age1+sex1+yosrg1+dx1+loc1+revison1,data=data)
data <- data.frame(
epo1 = as.integer(ifelse(epo == "Y",1,0)),
xfus1 = as.integer(ifelse(xfus == "Y",1,0)),
age1 = age,
sex1 = sex,
yosrg1 = yosrg,
dx1 = dx,
loc1 = loc,
revision1 = revision,
epo1 = epo,
xfus1 = xfus)
ate(xfus1 ~ epo1,, nuisance=~1, propensity=~age1+sex1+yosrg1+dx1+loc1+revision1,data=data)
install.packages("ATE")
weights = 1/pscore
## Read the data
rm(list=ls())
pc<-read.table('procrit.txt',
col.names=c('admithc','age','ap','bg','degcrv','dosrg','doshct',
'dx','epo','lasthct','loc','lsfusn','numblevl','pophct',
'revision','sex','unitnum','xfus','yosrg'))
## Make factors where necessary and restore year of surgery.
age<-pc$age
sex<-factor(pc$sex,levels=0:1,labels=c('F','M'))
yosrg<-pc$yosrg+1990
dx<-factor(pc$dx,levels=1:5,
labels=c('idio','kyph','congen','neuro','other'))
loc<-factor(pc$loc,levels=0:1,labels=c('upper','lower'))
revision<-factor(pc$revision,levels=1:2,labels=c('Y','N'))
epo<-factor(pc$epo,levels=0:1,labels=c('N','Y'))
xfus<-factor(pc$xfus,levels=0:1,labels=c('N','Y'))
## Remove cases with missing variables.
fubar<-1*is.na(cbind(age,sex,yosrg,dx,loc,revision,epo,xfus))
anymiss<-(apply(fubar,1,sum)>0)
age<-age[!anymiss]
sex<-sex[!anymiss]
yosrg<-yosrg[!anymiss]
dx<-dx[!anymiss]
loc<-loc[!anymiss]
revision<-revision[!anymiss]
epo<-epo[!anymiss]
xfus<-xfus[!anymiss]
table(xfus, epo)
## Now fit the propensity score model.
psmodel<-glm(epo~age+sex+yosrg+dx+loc+revision,family="binomial")
## Calculate propensity scores
pscore<-psmodel$fitted.values
weights = 1/pscore
weights[epo == "N"] = (1-pscore[epo == "N"])^(-1)
ate_result <- lm(xfus <- epo, weights = weights)
weights = 1/pscore
weights[epo == "N"] = (1-pscore[epo == "N"])^(-1)
ate_result <- lm(xfus ~ epo, weights = weights)
weights = 1/pscore
weights[epo == "N"] = (1-pscore[epo == "N"])^(-1)
ate_result <- glm(xfus ~ epo, weights = weights,family="binomial")
summary(ate_result)
knitr::opts_chunk$set(echo = TRUE)
library(meta)
## Read the data
rm(list=ls())
pc<-read.table('procrit.txt',
col.names=c('admithc','age','ap','bg','degcrv','dosrg','doshct',
'dx','epo','lasthct','loc','lsfusn','numblevl','pophct',
'revision','sex','unitnum','xfus','yosrg'))
## Make factors where necessary and restore year of surgery.
age<-pc$age
sex<-factor(pc$sex,levels=0:1,labels=c('F','M'))
yosrg<-pc$yosrg+1990
dx<-factor(pc$dx,levels=1:5,
labels=c('idio','kyph','congen','neuro','other'))
loc<-factor(pc$loc,levels=0:1,labels=c('upper','lower'))
revision<-factor(pc$revision,levels=1:2,labels=c('Y','N'))
epo<-factor(pc$epo,levels=0:1,labels=c('N','Y'))
xfus<-factor(pc$xfus,levels=0:1,labels=c('N','Y'))
## Remove cases with missing variables.
fubar<-1*is.na(cbind(age,sex,yosrg,dx,loc,revision,epo,xfus))
anymiss<-(apply(fubar,1,sum)>0)
age<-age[!anymiss]
sex<-sex[!anymiss]
yosrg<-yosrg[!anymiss]
dx<-dx[!anymiss]
loc<-loc[!anymiss]
revision<-revision[!anymiss]
epo<-epo[!anymiss]
xfus<-xfus[!anymiss]
table(xfus, epo)
## Now fit the propensity score model.
psmodel<-glm(epo~age+sex+yosrg+dx+loc+revision,family="binomial")
## Calculate propensity scores
pscore<-psmodel$fitted.values
## Now fit the propensity score model.
psmodel<-glm(epo~age+sex+yosrg+dx+loc+revision,family="binomial")
## Calculate propensity scores
pscore<-psmodel$fitted.values
## Estimate a logistic model for the outcome.
weights = numeric(length(pscore))
weights[epo == "Y"] = (pscore[epo == "Y"])^(-1)
weights[epo == "N"] = (1-pscore[epo == "N"])^(-1)
ate_ls <- glm(xfus ~ epo, weights = weights, family = "binominal")
ate_ls <- glm(xfus ~ epo, weights = weights, family = "binomial")
ate_ls <- glm(xfus ~ epo, weights = weights, family = "binomial")
as.integer(xfus)
as.integer(epo)
xfus1 = as.integer(xfus) - 1
epo1 = as.integer(epo) - 1
ate_ls <- glm(xfus1 ~ epo1, weights = weights, family = "binomial")
ate_ls$fitted.values
ate_ls$fitted.values[epo == "Y"] - ate_ls$fitted.values[epo == "N"]
length(ate_ls$fitted.values)
length(epo)
sum(ate_ls$fitted.values[epo == "Y"] - ate_ls$fitted.values[epo == "N"])
sum(ate_ls$fitted.values[epo == "Y"]* weights[epo == "Y"] - ate_ls$fitted.values[epo == "N"]* weights[epo == "N"])
sum(ate_ls$fitted.values[epo == "Y"]* weights[epo == "Y"] - ate_ls$fitted.values[epo == "N"]* weights[epo == "N"])/sum(weights)
sum(ate_ls$fitted.values[epo == "Y"]* weights[epo == "Y"]/sum( weights[epo == "Y"]) - ate_ls$fitted.values[epo == "N"]* weights[epo == "N"])/sum( weights[epo == "N"])
sum(ate_ls$fitted.values[epo == "Y"]* weights[epo == "Y"]/sum( weights[epo == "Y"]) - ate_ls$fitted.values[epo == "N"]* weights[epo == "N"])/sum( weights[epo == "N"])
## Read the data
rm(list=ls())
pc<-read.table('procrit.txt',
col.names=c('admithc','age','ap','bg','degcrv','dosrg','doshct',
'dx','epo','lasthct','loc','lsfusn','numblevl','pophct',
'revision','sex','unitnum','xfus','yosrg'))
## Make factors where necessary and restore year of surgery.
age<-pc$age
sex<-factor(pc$sex,levels=0:1,labels=c('F','M'))
yosrg<-pc$yosrg+1990
dx<-factor(pc$dx,levels=1:5,
labels=c('idio','kyph','congen','neuro','other'))
loc<-factor(pc$loc,levels=0:1,labels=c('upper','lower'))
revision<-factor(pc$revision,levels=1:2,labels=c('Y','N'))
epo<-factor(pc$epo,levels=0:1,labels=c('N','Y'))
xfus<-factor(pc$xfus,levels=0:1,labels=c('N','Y'))
## Remove cases with missing variables.
fubar<-1*is.na(cbind(age,sex,yosrg,dx,loc,revision,epo,xfus))
anymiss<-(apply(fubar,1,sum)>0)
age<-age[!anymiss]
sex<-sex[!anymiss]
yosrg<-yosrg[!anymiss]
dx<-dx[!anymiss]
loc<-loc[!anymiss]
revision<-revision[!anymiss]
epo<-epo[!anymiss]
xfus<-xfus[!anymiss]
table(xfus, epo)
## Now fit the propensity score model.
psmodel<-glm(epo~age+sex+yosrg+dx+loc+revision,family="binomial")
## Calculate propensity scores
pscore<-psmodel$fitted.values
## Estimate a logistic model for the outcome.
weights = numeric(length(pscore))
weights[epo == "Y"] = (pscore[epo == "Y"])^(-1)
weights[epo == "N"] = (1-pscore[epo == "N"])^(-1)
ate_ls <- glm(xfus ~ epo, weights = weights, family = "binomial")
table(xfus)
ate_ls <- glm(as.integer(xfus) ~ epo, weights = weights, family = "binomial")
xfus1 = as.integer(as.integer(xfus) - 1)
ate_ls <- glm(xfus1~ epo, weights = weights, family = "binomial")
type(xfus1)
typeof(xfus1)
ate_ls <- glm(xfus~ epo, weights = weights, family = "binomial")
ate_ls <- glm(xfus~ epo, weights = weights, family = "quasibinomial")
result = ate_ls$fitted.values
mean(result[epo == "Y"])
mean(result[epo == "N"])
mean(result[epo == "Y"]) - mean(result[epo == "N"])
library(gemtc)
library(rjags)
library(MASS)
?pairwise
# for multi-arm study( n > 2), we need to know the standard errors of reference measurement
# calculate_reference_std <- function(dataset){
#   var_BA = dataset[16:20, "sd"]^2
#   var_CA = dataset[21:25, "sd"]^2
#   var_BC = dataset[21:25, "sd"]^2
#   sd_result = sqrt((var_BA + var_CA - var_BC)/2)
#   study_id =  dataset[16:20, "ID"]
#   result = cbind(study_id, sd_result)
#   colnames(result) = c("ID", "sd")
#   return(result)
# }
#
#
#
#
# prepare_dataset_for_gemtc <- function(dataset){
#   colnames(dataset)[4:5] = c("outcome","sd")
#   reference_sd = calculate_reference_std(dataset)
#   dataset = subset(dataset,  t2 != 2)
#   result = NULL
#   for(i in 1:nrow(dataset)){
#     temp_Id = dataset[i, "ID"]
#     temp_treatment=  dataset[i,"t1"]
#     temp_reference = dataset[i,"t2"]
#     temp_diff = dataset[i, "outcome"]
#     temp_sd = dataset[i,"sd"]
#     result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#     # gemtc only allows one reference level per study
#     if(sum(is.na(result[result[,1] == temp_Id,3])) == 0){
#
#
#       if(temp_Id %in% reference_sd[,"ID"]){
#
#         temp_sd = reference_sd[reference_sd[,"ID"] == temp_Id,"sd"]
#
#
#       } else {
#         temp_sd = NA
#       }
#       result = rbind(result, c(temp_Id, temp_reference, NA,temp_sd))
#     }
#   }
#   colnames(result) = c("study", "treatment", "diff", "std.err")
#   return(result)
# }
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
source("CLNMA_functions.R")
setwd("E:/Github/Bayesian_Composite_NMA")
source("CLNMA_functions.R")
source("CLNMA_functions.R")
set.seed(1)
mu1 = c(0.5,1)
mu2 = c(0,-0.5)
tau1 =c(0.25,0.36)
tau2 =c(0.36,0.16)
tau = c(tau1,tau2)
rho = matrix(c(1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1),
nrow = 4)
tau_BC = tau1+tau2-2*rho[1,2]*sqrt(tau1*tau2)
betweenv = diag(tau)
for(i in 1:3){
for(j in (i+1):4){
betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
# for multi-arm study( n > 2), we need to know the standard errors of reference measurement
# calculate_reference_std <- function(dataset){
#   var_BA = dataset[16:20, "sd"]^2
#   var_CA = dataset[21:25, "sd"]^2
#   var_BC = dataset[21:25, "sd"]^2
#   sd_result = sqrt((var_BA + var_CA - var_BC)/2)
#   study_id =  dataset[16:20, "ID"]
#   result = cbind(study_id, sd_result)
#   colnames(result) = c("ID", "sd")
#   return(result)
# }
#
#
#
#
# prepare_dataset_for_gemtc <- function(dataset){
#   colnames(dataset)[4:5] = c("outcome","sd")
#   reference_sd = calculate_reference_std(dataset)
#   dataset = subset(dataset,  t2 != 2)
#   result = NULL
#   for(i in 1:nrow(dataset)){
#     temp_Id = dataset[i, "ID"]
#     temp_treatment=  dataset[i,"t1"]
#     temp_reference = dataset[i,"t2"]
#     temp_diff = dataset[i, "outcome"]
#     temp_sd = dataset[i,"sd"]
#     result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#     # gemtc only allows one reference level per study
#     if(sum(is.na(result[result[,1] == temp_Id,3])) == 0){
#
#
#       if(temp_Id %in% reference_sd[,"ID"]){
#
#         temp_sd = reference_sd[reference_sd[,"ID"] == temp_Id,"sd"]
#
#
#       } else {
#         temp_sd = NA
#       }
#       result = rbind(result, c(temp_Id, temp_reference, NA,temp_sd))
#     }
#   }
#   colnames(result) = c("study", "treatment", "diff", "std.err")
#   return(result)
# }
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
long_format_data = pairwise(treat = t1, TE = outcome1, seTE=sd1, reference.group = 3)
library(gemtc)
library(rjags)
library(MASS)
library(netmeta)
source("CLNMA_functions.R")
set.seed(1)
mu1 = c(0.5,1)
mu2 = c(0,-0.5)
tau1 =c(0.25,0.36)
tau2 =c(0.36,0.16)
tau = c(tau1,tau2)
rho = matrix(c(1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1,0.1,0.1,0.1,0.1,1),
nrow = 4)
tau_BC = tau1+tau2-2*rho[1,2]*sqrt(tau1*tau2)
betweenv = diag(tau)
for(i in 1:3){
for(j in (i+1):4){
betweenv[i,j] =betweenv[j,i]= rho[i,j]*sqrt(tau[i]*tau[j])
}
}
ss1 =1
ss2= 1
rho_w = matrix(c(1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1,0.2,0.2,0.2,0.2,1),
nrow = 4)
nab = nac=nbc=nabc=5
dataout = gendata(nab,nac,nbc,nabc,mu1,mu2,betweenv,rho_w,ss1,ss2)
# for multi-arm study( n > 2), we need to know the standard errors of reference measurement
# calculate_reference_std <- function(dataset){
#   var_BA = dataset[16:20, "sd"]^2
#   var_CA = dataset[21:25, "sd"]^2
#   var_BC = dataset[21:25, "sd"]^2
#   sd_result = sqrt((var_BA + var_CA - var_BC)/2)
#   study_id =  dataset[16:20, "ID"]
#   result = cbind(study_id, sd_result)
#   colnames(result) = c("ID", "sd")
#   return(result)
# }
#
#
#
#
# prepare_dataset_for_gemtc <- function(dataset){
#   colnames(dataset)[4:5] = c("outcome","sd")
#   reference_sd = calculate_reference_std(dataset)
#   dataset = subset(dataset,  t2 != 2)
#   result = NULL
#   for(i in 1:nrow(dataset)){
#     temp_Id = dataset[i, "ID"]
#     temp_treatment=  dataset[i,"t1"]
#     temp_reference = dataset[i,"t2"]
#     temp_diff = dataset[i, "outcome"]
#     temp_sd = dataset[i,"sd"]
#     result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#     # gemtc only allows one reference level per study
#     if(sum(is.na(result[result[,1] == temp_Id,3])) == 0){
#
#
#       if(temp_Id %in% reference_sd[,"ID"]){
#
#         temp_sd = reference_sd[reference_sd[,"ID"] == temp_Id,"sd"]
#
#
#       } else {
#         temp_sd = NA
#       }
#       result = rbind(result, c(temp_Id, temp_reference, NA,temp_sd))
#     }
#   }
#   colnames(result) = c("study", "treatment", "diff", "std.err")
#   return(result)
# }
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
long_format_data = pairwise(treat = t1, TE = outcome1, seTE=sd1, reference.group = 3)
# for multi-arm study( n > 2), we need to know the standard errors of reference measurement
# calculate_reference_std <- function(dataset){
#   var_BA = dataset[16:20, "sd"]^2
#   var_CA = dataset[21:25, "sd"]^2
#   var_BC = dataset[21:25, "sd"]^2
#   sd_result = sqrt((var_BA + var_CA - var_BC)/2)
#   study_id =  dataset[16:20, "ID"]
#   result = cbind(study_id, sd_result)
#   colnames(result) = c("ID", "sd")
#   return(result)
# }
#
#
#
#
# prepare_dataset_for_gemtc <- function(dataset){
#   colnames(dataset)[4:5] = c("outcome","sd")
#   reference_sd = calculate_reference_std(dataset)
#   dataset = subset(dataset,  t2 != 2)
#   result = NULL
#   for(i in 1:nrow(dataset)){
#     temp_Id = dataset[i, "ID"]
#     temp_treatment=  dataset[i,"t1"]
#     temp_reference = dataset[i,"t2"]
#     temp_diff = dataset[i, "outcome"]
#     temp_sd = dataset[i,"sd"]
#     result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#     # gemtc only allows one reference level per study
#     if(sum(is.na(result[result[,1] == temp_Id,3])) == 0){
#
#
#       if(temp_Id %in% reference_sd[,"ID"]){
#
#         temp_sd = reference_sd[reference_sd[,"ID"] == temp_Id,"sd"]
#
#
#       } else {
#         temp_sd = NA
#       }
#       result = rbind(result, c(temp_Id, temp_reference, NA,temp_sd))
#     }
#   }
#   colnames(result) = c("study", "treatment", "diff", "std.err")
#   return(result)
# }
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
long_format_data = pairwise(treat = t1, TE = outcome1, seTE=sd1, reference.group = 3, data = dataout1)
# for multi-arm study( n > 2), we need to know the standard errors of reference measurement
# calculate_reference_std <- function(dataset){
#   var_BA = dataset[16:20, "sd"]^2
#   var_CA = dataset[21:25, "sd"]^2
#   var_BC = dataset[21:25, "sd"]^2
#   sd_result = sqrt((var_BA + var_CA - var_BC)/2)
#   study_id =  dataset[16:20, "ID"]
#   result = cbind(study_id, sd_result)
#   colnames(result) = c("ID", "sd")
#   return(result)
# }
#
#
#
#
# prepare_dataset_for_gemtc <- function(dataset){
#   colnames(dataset)[4:5] = c("outcome","sd")
#   reference_sd = calculate_reference_std(dataset)
#   dataset = subset(dataset,  t2 != 2)
#   result = NULL
#   for(i in 1:nrow(dataset)){
#     temp_Id = dataset[i, "ID"]
#     temp_treatment=  dataset[i,"t1"]
#     temp_reference = dataset[i,"t2"]
#     temp_diff = dataset[i, "outcome"]
#     temp_sd = dataset[i,"sd"]
#     result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#     # gemtc only allows one reference level per study
#     if(sum(is.na(result[result[,1] == temp_Id,3])) == 0){
#
#
#       if(temp_Id %in% reference_sd[,"ID"]){
#
#         temp_sd = reference_sd[reference_sd[,"ID"] == temp_Id,"sd"]
#
#
#       } else {
#         temp_sd = NA
#       }
#       result = rbind(result, c(temp_Id, temp_reference, NA,temp_sd))
#     }
#   }
#   colnames(result) = c("study", "treatment", "diff", "std.err")
#   return(result)
# }
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"))
long_format_data = pairwise(treat = t1, TE = outcome1, seTE=sd1, reference.group = 3, data = dataout1, studlab = ID)
dataout1
# for multi-arm study( n > 2), we need to know the standard errors of reference measurement
# calculate_reference_std <- function(dataset){
#   var_BA = dataset[16:20, "sd"]^2
#   var_CA = dataset[21:25, "sd"]^2
#   var_BC = dataset[21:25, "sd"]^2
#   sd_result = sqrt((var_BA + var_CA - var_BC)/2)
#   study_id =  dataset[16:20, "ID"]
#   result = cbind(study_id, sd_result)
#   colnames(result) = c("ID", "sd")
#   return(result)
# }
#
#
#
#
# prepare_dataset_for_gemtc <- function(dataset){
#   colnames(dataset)[4:5] = c("outcome","sd")
#   reference_sd = calculate_reference_std(dataset)
#   dataset = subset(dataset,  t2 != 2)
#   result = NULL
#   for(i in 1:nrow(dataset)){
#     temp_Id = dataset[i, "ID"]
#     temp_treatment=  dataset[i,"t1"]
#     temp_reference = dataset[i,"t2"]
#     temp_diff = dataset[i, "outcome"]
#     temp_sd = dataset[i,"sd"]
#     result = rbind(result, c(temp_Id, temp_treatment, temp_diff, temp_sd))
#     # gemtc only allows one reference level per study
#     if(sum(is.na(result[result[,1] == temp_Id,3])) == 0){
#
#
#       if(temp_Id %in% reference_sd[,"ID"]){
#
#         temp_sd = reference_sd[reference_sd[,"ID"] == temp_Id,"sd"]
#
#
#       } else {
#         temp_sd = NA
#       }
#       result = rbind(result, c(temp_Id, temp_reference, NA,temp_sd))
#     }
#   }
#   colnames(result) = c("study", "treatment", "diff", "std.err")
#   return(result)
# }
dataout1 = subset(dataout,  select = c("ID", "t1", "t2", "outcome1", "sd1"),  t2 != 2)
long_format_data = pairwise(treat = t1, TE = outcome1, seTE=sd1, reference.group = 3, data = dataout1, studlab = ID)
head(long_format_data)
# dataout1 = prepare_dataset_for_gemtc(dataout1)
# dataout2 = subset(dataout,  select = c("ID", "t1", "t2", "outcome2", "sd2"))
# dataout2 = prepare_dataset_for_gemtc(dataout2)
network1 <- mtc.network(data.re = long_format_data)
?mtc.network
network1 <- mtc.network(long_format_data)
0.2655560	- 1.6515857
network1 <- mtc.network(data=long_format_data)
network1 <- mtc.network(data=long_format_data)
